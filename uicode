




local PurpleFameLib = {}
local TS 	  = game:GetService("TweenService")
local RS	  = game:GetService("RunService")
local UIS 	  = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse   = LocalPlayer:GetMouse()

local function CreateDrag(gui)
	local dragging = false
	local dragInput
	local dragStart
	local startPos


	local function update(input)
		local delta = input.Position - dragStart
		gui.Position = UDim2.new(
			startPos.X.Scale,
			startPos.X.Offset + delta.X,
			startPos.Y.Scale,
			startPos.Y.Offset + delta.Y
		)
	end


			gui.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					dragging = true
					dragStart = input.Position
					startPos = gui.Position

					input.Changed:Connect(function()
						if input.UserInputState == Enum.UserInputState.End then
							dragging = false
						end
					end)
				end
			end)


		gui.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)


	UIS.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end



function PurpleFameLib:newWindow(Title: string)
	local window = {
		CurrentTab = nil
	}
	
	local PurpleFameUI = Instance.new('ScreenGui', game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"))
	local MainFrame = Instance.new('Frame', PurpleFameUI)
	local TopBar = Instance.new('Frame', MainFrame)
	local TopBarCorner = Instance.new('UICorner', TopBar)
	local TopBarTitle = Instance.new('TextLabel', TopBar)
	local MainFrameCorner = Instance.new('UICorner', MainFrame)
	local Line = Instance.new('Frame', MainFrame)
	local TabHolder = Instance.new('Frame', MainFrame)
	local TabLayout = Instance.new('UIListLayout', TabHolder)
	local Line2 = Instance.new('Frame', MainFrame)
	local DropShadowHolder = Instance.new('Frame', MainFrame)
	local DropShadow = Instance.new('ImageLabel', DropShadowHolder)
	
	

	PurpleFameUI.Name = "PurpleFameUI"
	PurpleFameUI.Enabled = true
	PurpleFameUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	MainFrame.Name = "MainFrame"
	MainFrame.Position = UDim2.new(0.3602,0,0.3077,0)
	MainFrame.Size = UDim2.new(0,444,0,310)
	MainFrame.BackgroundColor3 = Color3.new(0.1294,0.1294,0.1294)
	MainFrame.BorderSizePixel = 0
	MainFrame.BorderColor3 = Color3.new(0,0,0)
	TopBar.Name = "TopBar"
	TopBar.Size = UDim2.new(0,444,0,34)
	TopBar.BackgroundColor3 = Color3.new(1,1,1)
	TopBar.BackgroundTransparency = 1
	TopBar.BorderSizePixel = 0
	TopBar.BorderColor3 = Color3.new(0,0,0)
	TopBarCorner.CornerRadius = UDim.new(0,2)
	TopBarTitle.Name = "TopBarTitle"
	TopBarTitle.Position = UDim2.new(0.2748,0,0,0)
	TopBarTitle.Size = UDim2.new(0,200,0,34)
	TopBarTitle.BackgroundColor3 = Color3.new(1,1,1)
	TopBarTitle.BackgroundTransparency = 1
	TopBarTitle.BorderSizePixel = 0
	TopBarTitle.BorderColor3 = Color3.new(0,0,0)
	TopBarTitle.Text = tostring(Title)
	TopBarTitle.TextColor3 = Color3.new(1,1,1)
	TopBarTitle.Font = Enum.Font.SourceSans
	TopBarTitle.TextSize = 25
	MainFrameCorner.CornerRadius = UDim.new(0,5)
	Line.Name = "Line"
	Line.Position = UDim2.new(-0.0002,0,0.1112,0)
	Line.Size = UDim2.new(0,444,0,1)
	Line.BackgroundColor3 = Color3.new(0.6039,0,0.9059)
	Line.BorderSizePixel = 0
	Line.BorderColor3 = Color3.new(0,0,0)
	TabHolder.Name = "TabHolder"
	TabHolder.Position = UDim2.new(-0.0002,0,0.1156,0)
	TabHolder.Size = UDim2.new(0,444,0,26)
	TabHolder.BackgroundColor3 = Color3.new(0,0,0)
	TabHolder.BorderSizePixel = 0
	TabHolder.BorderColor3 = Color3.new(0,0,0)
	
	TabLayout.Name = "TabLayout"
	TabLayout.FillDirection = Enum.FillDirection.Horizontal
	TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
	Line2.Name = "Line2"
	Line2.Position = UDim2.new(-0.0025,0,0.1963,0)
	Line2.Size = UDim2.new(0,444,0,1)
	Line2.BackgroundColor3 = Color3.new(0.6039,0,0.9059)
	Line2.BackgroundTransparency = 0.2
	Line2.BorderSizePixel = 0
	Line2.BorderColor3 = Color3.new(0,0,0)
	DropShadowHolder.Name = "DropShadowHolder"
	DropShadowHolder.Size = UDim2.new(1,0,1,0)
	DropShadowHolder.BackgroundTransparency = 1
	DropShadowHolder.BorderSizePixel = 0
	DropShadowHolder.ZIndex = 0
	DropShadow.Name = "DropShadow"
	DropShadow.Position = UDim2.new(0.5,0,0.5,0)
	DropShadow.Size = UDim2.new(1,47,1,47)
	DropShadow.BackgroundTransparency = 1
	DropShadow.BorderSizePixel = 0
	DropShadow.AnchorPoint = Vector2.new(0.5,0.5)
	DropShadow.Image = "rbxassetid://6015897843"
	DropShadow.ImageColor3 = Color3.new(0,0,0)
	DropShadow.ScaleType = Enum.ScaleType.Slice
	DropShadow.SliceCenter = Rect.new(49,49,450,450)
	DropShadow.ImageTransparency = 0.5
	DropShadow.ZIndex = 0
	CreateDrag(MainFrame)
	

	function window:newTab(Title: string)
	local tab = {
		Enabled = false
	}
	
	local Active = Instance.new('TextButton', TabHolder)
	local CanvasHolder = Instance.new('Frame', MainFrame)
	local Canvas = Instance.new('ScrollingFrame', CanvasHolder)
	local CanvasLayout = Instance.new('UIListLayout', Canvas)
	
	Active.AutoButtonColor = false
	Active.Name = "Active"
	Active.Size = UDim2.new(0,63,0,24)
	Active.BackgroundColor3 = Color3.new(1,1,1)
	Active.BackgroundTransparency = 1
	Active.BorderSizePixel = 0
	Active.BorderColor3 = Color3.new(0,0,0)
	Active.Text = tostring(Title)
	Active.TextColor3 = Color3.fromRGB(184, 184, 184)
	Active.Font = Enum.Font.SourceSans
	Active.TextSize = 14

	CanvasHolder.Name = "CanvasHolder"
	CanvasHolder.Position = UDim2.new(0.018,0,0.2194,0)
	CanvasHolder.Size = UDim2.new(0,428,0,233)
	CanvasHolder.BackgroundColor3 = Color3.new(0.2157,0.8706,1)
	CanvasHolder.BackgroundTransparency = 1
	CanvasHolder.BorderSizePixel = 0
	CanvasHolder.BorderColor3 = Color3.new(0,0,0)
	Canvas.Name = "Canvas"
	Canvas.Size = UDim2.new(0,428,0,233)
	Canvas.BackgroundColor3 = Color3.new(1,1,1)
	Canvas.BackgroundTransparency = 1
	Canvas.BorderSizePixel = 0
	Canvas.BorderColor3 = Color3.new(0,0,0)
	Canvas.ScrollBarThickness = 0
	Canvas.ScrollBarImageColor3 = Color3.new(0,0,0)
	Canvas.Visible = false
	CanvasLayout.Name = "CanvasLayout"
	CanvasLayout.SortOrder = Enum.SortOrder.LayoutOrder
	CanvasLayout.Padding = UDim.new(0,5)
	
	

	function tab:Enable()
		if not tab.Enabled then
			if window.CurrentTab ~= nil then
				window.CurrentTab:Disable()
			end
			tab.Enabled = true
			Active.TextColor3 = Color3.fromRGB(255, 255, 255) 
			Canvas.Visible = true
			window.CurrentTab = tab

			for _, v in pairs(MainFrame:GetChildren()) do
				if v.Name == "DropDownOptions" then
					v.Visible = false
				end
			end
		end
	end

	function tab:Disable()
		if tab.Enabled then
			tab.Enabled = false
			Active.TextColor3 = Color3.fromRGB(184, 184, 184)
			Canvas.Visible = false
		end
	end

	Active.MouseButton1Down:Connect(function()
		tab:Enable()
	end)

	if not window.CurrentTab then
		tab:Enable()
	end
	
		function tab:NewToggle(Title: string, Options: table)
			local Settings = {
				Enabled  = Options.Default or false,
				Parent   = Options.Parent or Canvas,
				Callback = Options.Callback or function() end
			}
			
			
			local ToggleActive = Instance.new('ImageButton', Canvas)
			local ToggleCorner = Instance.new('UICorner', ToggleActive)
			local ToggleTitle = Instance.new('TextLabel', ToggleActive)
			local Checkmark = Instance.new('Frame', ToggleActive)
			local CheckmarkCorner = Instance.new('UICorner', Checkmark)
			local CheckmarkStroke = Instance.new('UIStroke', Checkmark)
			
			ToggleActive.AutoButtonColor = false
			ToggleActive.Name = "ToggleActive"
			ToggleActive.Size = UDim2.new(0,428,0,30)
			ToggleActive.BackgroundColor3 = Color3.new(0.1176,0.1176,0.1176)
			ToggleActive.BorderSizePixel = 0
			ToggleActive.BorderColor3 = Color3.new(0,0,0)
			ToggleTitle.Name = "ToggleTitle"
			ToggleTitle.Position = UDim2.new(0.0397,0,0.1667,0)
			ToggleTitle.Size = UDim2.new(0,55,0,20)
			ToggleTitle.BackgroundColor3 = Color3.new(1,1,1)
			ToggleTitle.BackgroundTransparency = 1
			ToggleTitle.BorderSizePixel = 0
			ToggleTitle.BorderColor3 = Color3.new(0,0,0)
			ToggleTitle.Text = Title
			ToggleTitle.TextColor3 = Color3.new(1,1,1)
			ToggleTitle.Font = Enum.Font.SourceSans
			ToggleTitle.TextSize = 17
			Checkmark.Name = "Checkmark"
			Checkmark.Position = UDim2.new(0.9182,0,0.1333,0)
			Checkmark.Size = UDim2.new(0,22,0,22)
			Checkmark.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
			Checkmark.BorderSizePixel = 0
			Checkmark.BorderColor3 = Color3.new(0,0,0)
			CheckmarkCorner.CornerRadius = UDim.new(0,4)
			CheckmarkStroke.Thickness = 1.5
			
			
			local function Toggle(Value)
				if Value then
					TS:Create(Checkmark, TweenInfo.new(.2, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(154, 0, 231)}):Play()
				else
					TS:Create(Checkmark, TweenInfo.new(.2, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(0, 0, 0)}):Play()
				end
				Settings.Enabled = Value
				Settings.Callback(Settings.Enabled)
			end

			Toggle(Settings.Enabled)

			ToggleActive.MouseButton1Down:Connect(function()
				Toggle(not Settings.Enabled)
			end)
			
			
			
			
			
			
			return Settings
			end
	
	
		function tab:NewSlider(Title: string, Options: table)

			local Settings = {
				Connections = {},
				Value 		= Options.Default or 0,
				MinVal 		= Options.Min or 0,
				MaxVal 		= Options.Max or 100,
				Parent		= Options.Parent or Canvas,
				Callback 	= Options.Callback or function() end
			}
			
			local Slider = Instance.new('ImageButton', Canvas)
			local SliderCorner = Instance.new('UICorner', Slider)
			local SliderTitle = Instance.new('TextLabel', Slider)
			local SliderBack = Instance.new('Frame', Slider)
			local SliderMain = Instance.new('Frame', SliderBack)
			local SliderMainCorner = Instance.new('UICorner', SliderMain)
			local SliderBackCorner = Instance.new('UICorner', SliderBack)
			local Value = Instance.new('TextLabel', Slider)
			local ValueStroke = Instance.new('UIStroke', Value)
			local ValueCorner = Instance.new('UICorner', Value)
			
			
			Slider.AutoButtonColor = false
			Slider.Name = "Slider"
			Slider.Position = UDim2.new(0,0,0.3004,0)
			Slider.Size = UDim2.new(0,428,0,54)
			Slider.BackgroundColor3 = Color3.new(0.1176,0.1176,0.1176)
			Slider.BorderSizePixel = 0
			Slider.BorderColor3 = Color3.new(0,0,0)
			SliderTitle.Name = "SliderTitle"
			SliderTitle.Position = UDim2.new(0.0397,0,0.1667,0)
			SliderTitle.Size = UDim2.new(0,55,0,20)
			SliderTitle.BackgroundColor3 = Color3.new(1,1,1)
			SliderTitle.BackgroundTransparency = 1
			SliderTitle.BorderSizePixel = 0
			SliderTitle.BorderColor3 = Color3.new(0,0,0)
			SliderTitle.Text = Title
			SliderTitle.TextColor3 = Color3.new(1,1,1)
			SliderTitle.Font = Enum.Font.SourceSans
			SliderTitle.TextSize = 17
			SliderBack.Name = "SliderBack"
			SliderBack.Position = UDim2.new(0.007,0,0.6852,0)
			SliderBack.Size = UDim2.new(0,422,0,10)
			SliderBack.BackgroundColor3 = Color3.new(0,0,0)
			SliderBack.BorderSizePixel = 0
			SliderBack.BorderColor3 = Color3.new(0,0,0)
			SliderMain.Name = "SliderMain"
			SliderMain.Position = UDim2.new(-0.0001,0,-0.015,0)
			SliderMain.Size = UDim2.new(0,210,0,10)
			SliderMain.BackgroundColor3 = Color3.new(0.6039,0,0.9059)
			SliderMain.BorderSizePixel = 0
			SliderMain.BorderColor3 = Color3.new(0,0,0)
			Value.Name = "Value"
			Value.Position = UDim2.new(0.8949,0,0.1667,0)
			Value.Size = UDim2.new(0,34,0,16)
			Value.BackgroundColor3 = Color3.new(1,1,1)
			Value.BackgroundTransparency = 1
			Value.BorderSizePixel = 0
			Value.BorderColor3 = Color3.new(0,0,0)
			Value.Text = string.format(Options.Default or 0, Settings.MaxVal)
			Value.TextColor3 = Color3.new(1,1,1)
			Value.Font = Enum.Font.SourceSans
			Value.TextSize = 14
			ValueStroke.Color = Color3.new(0.6039,0,0.9059)
			ValueStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
			ValueCorner.CornerRadius = UDim.new(0,4)

			
			local function GetValue()
				return tonumber(Settings.Value)
			end

			function Settings:SetValue(v)
				if v == nil then
					local mouseX = UIS:GetMouseLocation().X
					local percentage = math.clamp((mouseX - SliderBack.AbsolutePosition.X) / (SliderBack.AbsoluteSize.X), 0, 1)
					local value = math.floor((((Settings.MaxVal - Settings.MinVal) * percentage) + Settings.MinVal) * 10 + 0.5) / 10
					Value.Text = value
					SliderMain.Size = UDim2.fromScale(percentage, 1)
					Settings.Value = value
					Settings.Callback(value)
				else
					local value = math.floor(v * 10 + 0.5) / 10
					Value.Text = value
					SliderMain.Size = UDim2.fromScale(((value - Settings.MinVal) / (Settings.MaxVal - Settings.MinVal)), 1)
					Settings.Value = value
					Settings.Callback(value)
				end
			end

			local Connection;

			table.insert(Settings.Connections, UIS.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					pcall(function()
						if Connection then
							Connection:Disconnect();
							Connection = nil;
						end
					end)
				end
			end))

			table.insert(Settings.Connections, Slider.MouseButton1Down:Connect(function()
				if(Connection) then
					Connection:Disconnect();
				end;

				Connection = RS.Heartbeat:Connect(function()
					Settings:SetValue()
				end)
			end))
			
			
			return Settings
		end
		
		
		
		function tab:NewSection(Title: string, Options: table)
			local Settings = {}
			

			local Section = Instance.new('Frame', Canvas)
			local SectionTitle = Instance.new('TextLabel', Section)

			
			
			Section.Name = "Section"
			Section.Size = UDim2.new(0,428,0,23)
			Section.BackgroundColor3 = Color3.new(0.1176,0.1176,0.1176)
			Section.BackgroundTransparency = 1
			Section.BorderSizePixel = 0
			Section.BorderColor3 = Color3.new(0,0,0)
			SectionTitle.Name = "SectionTitle"
			SectionTitle.Position = UDim2.new(0.014,0,0.0667,0)
			SectionTitle.Size = UDim2.new(0,55,0,20)
			SectionTitle.BackgroundColor3 = Color3.new(1,1,1)
			SectionTitle.BackgroundTransparency = 1
			SectionTitle.BorderSizePixel = 0
			SectionTitle.BorderColor3 = Color3.new(0,0,0)
			SectionTitle.Text = Title
			SectionTitle.TextColor3 = Color3.new(1,1,1)
			SectionTitle.Font = Enum.Font.SourceSans
			SectionTitle.TextSize = 15
			
			function Settings:NewToggle(Title, Options)
				Options.Parent = Section
				return tab:NewToggle(Title, Options)
			end
			
			function Settings:NewSlider(Title, Options)
				Options.Parent = Section
				return tab:NewSlider(Title, Options)
			end
			
			
			return Settings
			end
	
	
	
	return tab
	end
	
	
	return window
end

